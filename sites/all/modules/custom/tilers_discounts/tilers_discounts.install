<?php
//$Id: tilers_discounts.install,v 1.9.2.6 2010/12/28 00:06:23 jrust Exp $


/**
 * @file
 * Install hooks for tilers_discounts.module.
 */
function tilers_discounts_schema() {
  $schema = array();

  $schema["tilers_discounts"] = array(
    "fields" => array(
      "discount_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "name" => array(
        "type" => "varchar",
        "length" => 255,
        "not null" => TRUE,
        "default" => "",
      ),
      "short_description" => array(
        "type" => "varchar",
        "length" => 100,
        "not null" => TRUE,
        "default" => "",
      ),
      "description" => array(
        "type" => "varchar",
        "length" => 100,
        "not null" => TRUE,
        "default" => "",
      ),
      "qualifying_type" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
      ),
      "qualifying_amount" => array(
        "type" => "float",
        "not null" => TRUE,
        "default" => 0.0,
        "description" => t("Minimum quantity or price required to qualify for this discount."),
      ),
      "has_qualifying_amount_max" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Whether or not this discount has a max qualifying amount."),
      ),
      "qualifying_amount_max" => array(
        "type" => "float",
        "not null" => TRUE,
        "default" => 0.0,
        "description" => t("Maximum quantity or price required to qualify for this discount."),
      ),
      "discount_type" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
      ),
      "discount_amount" => array(
        "type" => "float",
        "not null" => TRUE,
        "default" => 0.0,
        "description" => t("Amount to discount (i.e. 1 free item, 25%, or $2.00)"),
      ),
      "requires_code" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("Requires code to activate discount."),
      ),
      "filter_type" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("What type of object to filter on."),
      ),
      "has_role_filter" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Whether or not this discount filters based on role."),
      ),
      "use_only_discounted_products_to_qualify" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Calculate the order subtotal using only discounted products."),
      ),
      "requires_single_product_to_qualify" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("Requires qualifying amount to come from a single product."),
      ),
      "required_product_type" => array(
        "type" => "int",
        'size' => 'tiny',
        "not null" => TRUE,
        "default" => 0,
      ),
      "max_times_applied" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("Number of times this discount can be applied to a single cart (0 for unlimited)."),
      ),
      "limit_max_times_applied" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Whether or not to further limit the maximum times applied to the number of qualifying products."),
      ),
      "can_be_combined_with_other_discounts" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Whether or not this discount will be applied if other discounts are."),
      ),
      'add_to_cart' => array(
        'type' => 'int',
        'size' => 'tiny',
        'not null' => FALSE,
        'default' => 0,
        'description' => t('Indicates whether free items are added to cart by the module.'),
      ),
      "max_uses" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Number of times this discount can be applied (0 for no limit)."),
      ),
      "max_uses_per_user" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("Number of times this discount can be applied to a particular user (0 for unlimited)."),
      ),
      "max_uses_per_code" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Number of times this discount can be applied for a particular code (0 for unlimited)."),
      ),
      "has_activation" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Whether or not discount has an activation date."),
      ),
      "activates_on" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("The activation date and time as a unix timestamp."),
      ),
      "has_expiration" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Whether or not discount has an expiration."),
      ),
      "expiration" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("The exipration date and time as a unix timestamp."),
      ),
      "is_active" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => FALSE,
        "default" => 0,
        "description" => t("Convenience flag to state whether code is published on site or not."),
      ),
      "weight" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 0,
      ),
      "insert_timestamp" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("The insert date and time as a unix timestamp."),
      ),
    ),
    "primary key" => array("discount_id"),
  );

  $schema["tilers_discounts_codes"] = array(
    "fields" => array(
      "discount_code_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "discount_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("The {tilers_discounts}.discount_id of the discount."),
      ),
      "code" => array(
        "type" => "varchar",
        "length" => 100,
        "not null" => TRUE,
        "default" => "",
      ),
    ),
    "primary key" => array("discount_code_id"),
  );

  $schema["tilers_discounts_products"] = array(
    "fields" => array(
      "discount_product_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "discount_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {tilers_discounts}.discount_id of the discount."),
      ),
      "product_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {tilers_products}.nid of the product being discounted."),
      ),
      "grouping" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("The grouping of this entry since required products be used in discount qualification or application."),
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    "primary key" => array("discount_product_id"),
  );

  $schema["tilers_discounts_terms"] = array(
    "fields" => array(
      "discount_term_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "discount_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {tilers_discounts}.discount_id of the discount."),
      ),
      "term_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {term}.tid of the term being discounted."),
      ),
      "grouping" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("The grouping of this entry since required products be used in discount qualification or application."),
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    "primary key" => array("discount_term_id"),
  );

  $schema["tilers_discounts_skus"] = array(
    "fields" => array(
      "discount_sku_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "discount_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {tilers_discounts}.discount_id of the discount."),
      ),
      "sku" => array(
        "type" => "varchar",
        "length" => 255,
        "not null" => TRUE,
        "description" => t("The {tilers_products}.model of the product being discounted."),
      ),
      "grouping" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("The grouping of this entry since required products be used in discount qualification or application."),
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    "primary key" => array("discount_sku_id"),
  );

  $schema["tilers_discounts_classes"] = array(
    "fields" => array(
      "discount_class_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "discount_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {tilers_discounts}.discount_id of the discount."),
      ),
      "class" => array(
        "type" => "varchar",
        "length" => 32,
        "not null" => TRUE,
        "description" => t("The {node_type}.type of the product being discounted."),
      ),
      "grouping" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("The grouping of this entry since required products be used in discount qualification or application."),
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    "primary key" => array("discount_class_id"),
  );

  $schema["tilers_discounts_authors"] = array(
    "fields" => array(
      "discount_author_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "discount_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {tilers_discounts}.discount_id of the discount."),
      ),
      "author_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {users}.uid of the author being discounted."),
      ),
      "grouping" => array(
        "type" => "int",
        "size" => "tiny",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("The grouping of this entry since required products be used in discount qualification or application."),
      ),
    ),
    'indexes' => array(
      'discount_id_grouping' => array('discount_id', 'grouping'),
    ),
    "primary key" => array("discount_author_id"),
  );

  $schema["tilers_discounts_roles"] = array(
    "fields" => array(
      "discount_role_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "discount_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {tilers_discounts}.discount_id of the discount."),
      ),
      "role_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {role}.rid of the role required."),
      ),
    ),
    "primary key" => array("discount_role_id"),
  );

  $schema["tilers_discounts_uses"] = array(
    "fields" => array(
      "discount_use_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "discount_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("The {tilers_discounts}.discount_id of the discount."),
      ),
      "user_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("The {users}.uid of the user who used the discount or (0 if anonymous)."),
      ),
      "order_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("The {uc_orders}.order_id of the user's order."),
      ),
      "code" => array(
        "type" => "varchar",
        "length" => 100,
        "not null" => TRUE,
        "default" => "",
        "description" => t("Code used for discount."),
      ),
      "times_applied" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 1,
        "description" => t("Number of times this discount was applied."),
      ),
      "amount" => array(
        "type" => "float",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("Total amount of discount."),
      ),
      "insert_timestamp" => array(
        "type" => "int",
        "not null" => TRUE,
        "default" => 0,
        "description" => t("The insert date and time as a unix timestamp."),
      ),
    ),
    "primary key" => array("discount_use_id"),
  );

  $schema["tilers_discounts_order_codes"] = array(
    "fields" => array(
      "order_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {uc_orders}.order_id of the user's order."),
      ),
      "codes" => array(
        "type" => "text",
        "not null" => TRUE,
        "description" => t("Newline delimited codes string for order."),
      ),
    ),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function tilers_discounts_install() {
  drupal_install_schema("tilers_discounts");

  //Weight must be less than uc_payment's
  db_query("UPDATE {system} SET weight=-10 WHERE name='tilers_discounts'");

  //Print out a nice message directing administrators towards the configuration screen.
  drupal_set_message(st("UC Discounts (Alternative) settings are available under !link",
      array("!link" => l("Administer > Store administration > Discounts", "admin/store/tilers_discounts"))
    ));
}

/**
 * Implementation of hook_uninstall().
 */
function tilers_discounts_uninstall() {
  drupal_uninstall_schema("tilers_discounts");
}

//Add {tilers_discounts_roles} table
function tilers_discounts_update_1() {
  $queries = array();

  $schema = tilers_discounts_roles_schema();
  db_create_table($queries, "tilers_discounts_roles", $schema["tilers_discounts_roles"]);

  switch ($GLOBALS["db_type"]) {
    case "mysql":
    case "mysqli":
      $queries[] = update_sql("ALTER TABLE {tilers_discounts} ADD has_role_filter tinyint NOT NULL default 0 AFTER filter_type");
      break;

    case "pgsql":
      db_add_column($queries, "tilers_discounts", "has_role_filter", "tinyint",
        array("size" => "tiny", "not null" => TRUE, "default" => 0)
      );
      break;
  }

  return $queries;
}

//Add has_qualifying_amount_max and qualifying_amount_max columns to tilers_discounts table
function tilers_discounts_update_2() {
  $queries = array();

  switch ($GLOBALS["db_type"]) {
    case "mysql":
    case "mysqli":
      $queries[] = update_sql("ALTER TABLE {tilers_discounts} ADD has_qualifying_amount_max tinyint NOT NULL default 0 AFTER qualifying_amount");
      $queries[] = update_sql("ALTER TABLE {tilers_discounts} ADD qualifying_amount_max float NOT NULL default 0 AFTER has_qualifying_amount_max");

      //Fixes update bug that existed in tilers_discounts_update_1 (but is fixed now)
      $queries[] = update_sql("ALTER TABLE {tilers_discounts} MODIFY has_role_filter tinyint NOT NULL");
      break;

    case "pgsql":
      db_add_column($queries, "tilers_discounts", "has_qualifying_amount_max", "tinyint",
        array("not null" => TRUE, "default" => 0)
      );
      db_add_column($queries, "tilers_discounts", "qualifying_amount_max", "float",
        array("not null" => TRUE, "default" => 0)
      );
      break;
  }

  return $queries;
}

//Add max_uses_per_code column to tilers_discounts table
function tilers_discounts_update_3() {
  $queries = array();

  switch ($GLOBALS["db_type"]) {
    case "mysql":
    case "mysqli":
      $queries[] = update_sql("ALTER TABLE {tilers_discounts} ADD max_uses_per_code int NOT NULL default 0 AFTER max_uses_per_user");
      break;

    case "pgsql":
      db_add_column($queries, "tilers_discounts", "max_uses_per_code", "int",
        array("not null" => TRUE, "default" => 0)
      );
      break;
  }

  return $queries;
}

//Add tilers_discounts_skus table
function tilers_discounts_update_4() {
  $schema = tilers_discounts_skus_schema();
  db_create_table($queries, "tilers_discounts_skus", $schema["tilers_discounts_skus"]);
  return $queries;
}

//Add required_product column to tilers_discounts table
function tilers_discounts_update_5() {
  $queries = array();

  switch ($GLOBALS["db_type"]) {
    case "mysql":
    case "mysqli":
      $queries[] = update_sql("ALTER TABLE {tilers_discounts} ADD required_product varchar(255) NOT NULL default '' AFTER requires_single_product_to_qualify");
      break;

    case "pgsql":
      db_add_column($queries, "tilers_discounts", "required_product", "varchar(255)",
        array("not null" => TRUE, "default" => "")
      );
      break;
  }

  return $queries;
}

//Add tilers_discounts_classes table
function tilers_discounts_update_6() {
  $schema = tilers_discounts_classes_schema();
  db_create_table($queries, "tilers_discounts_classes", $schema["tilers_discounts_classes"]);
  return $queries;
}

//Rename is_published to is_active
function tilers_discounts_update_7() {
  db_change_field($ret, 'tilers_discounts', 'is_published', 'is_active',array('type' => 'int', 'size' => 'tiny', 'not null' => FALSE, 'default' => 0, ));
  
  return $ret;
}

/**
 * #984718, Add an activates_on date to discounts.
 */
function tilers_discounts_update_6001() {
  $schema = tilers_discounts_schema();
  $ret = array();
  db_add_field($ret, 'tilers_discounts', 'has_activation', $schema['tilers_discounts']['fields']['has_activation']);
  db_add_field($ret, 'tilers_discounts', 'activates_on', $schema['tilers_discounts']['fields']['activates_on']);
  return $ret;
}

/**
 * #919730, Add the ability for a discount to qualify based on subtotal of all products
 */
function tilers_discounts_update_6002() {
  $schema = tilers_discounts_schema();
  $ret = array();
  db_add_field($ret, 'tilers_discounts', 'use_only_discounted_products_to_qualify', $schema['tilers_discounts']['fields']['use_only_discounted_products_to_qualify']);
  // This was the default before this feature was added
  db_query("UPDATE {tilers_discounts} SET use_only_discounted_products_to_qualify=1");
  return $ret;
}

/**
 * #1100790, Add the ability for a discount max applications to be limited to number of required products in the cart
 */
function tilers_discounts_update_6003() {
  $schema = tilers_discounts_schema();
  $ret = array();
  db_add_field($ret, 'tilers_discounts', 'limit_max_times_applied', $schema['tilers_discounts']['fields']['limit_max_times_applied']);
  db_query("UPDATE {tilers_discounts} SET required_product = '' WHERE required_product = 'none'");
  return $ret;
}

//Add tilers_discounts_authors table
function tilers_discounts_update_6004() {
  $schema["tilers_discounts_authors"] = array(
    "fields" => array(
      "discount_author_id" => array(
        "type" => "serial",
        "not null" => TRUE,
      ),
      "discount_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {tilers_discounts}.discount_id of the discount."),
      ),
      "author_id" => array(
        "type" => "int",
        "not null" => TRUE,
        "description" => t("The {users}.uid of the author being discounted."),
      ),
    ),
    "primary key" => array("discount_author_id"),
  );
  $ret = array();
  db_create_table($ret, 'tilers_discounts_authors', $schema['tilers_discounts_authors']);
  return $ret;
}

/**
 * #999778, Allow multiple products to be selected for discount qualification
 */
function tilers_discounts_update_6005() {
  $schema = tilers_discounts_schema();
  $ret = array();
  db_add_field($ret, 'tilers_discounts', 'required_product_type', $schema['tilers_discounts']['fields']['required_product_type']);
  db_add_field($ret, 'tilers_discounts_products', 'grouping', $schema['tilers_discounts_products']['fields']['grouping']);
  db_add_index($ret, 'tilers_discounts_products', 'discount_id_grouping', array('discount_id', 'grouping'));
  db_add_field($ret, 'tilers_discounts_terms', 'grouping', $schema['tilers_discounts_terms']['fields']['grouping']);
  db_add_index($ret, 'tilers_discounts_terms', 'discount_id_grouping', array('discount_id', 'grouping'));
  db_add_field($ret, 'tilers_discounts_skus', 'grouping', $schema['tilers_discounts_skus']['fields']['grouping']);
  db_add_index($ret, 'tilers_discounts_skus', 'discount_id_grouping', array('discount_id', 'grouping'));
  db_add_field($ret, 'tilers_discounts_classes', 'grouping', $schema['tilers_discounts_classes']['fields']['grouping']);
  db_add_index($ret, 'tilers_discounts_classes', 'discount_id_grouping', array('discount_id', 'grouping'));
  db_add_field($ret, 'tilers_discounts_authors', 'grouping', $schema['tilers_discounts_authors']['fields']['grouping']);
  db_add_index($ret, 'tilers_discounts_authors', 'discount_id_grouping', array('discount_id', 'grouping'));
  $result = db_query("SELECT * FROM {tilers_discounts} WHERE required_product != ''");
  while ($discount = db_fetch_object($result)) {
    db_query("INSERT INTO {tilers_discounts_skus} SET discount_id = %d, sku = '%s', grouping = %d", $discount->discount_id, $discount->required_product, DISCOUNT_FILTER_GROUPING_QUALIFICATION);
    db_query("UPDATE {tilers_discounts} SET required_product_type = %d WHERE discount_id = %d", FILTER_TYPE_SKUS, $discount->discount_id);
  }
  db_drop_field($ret, 'tilers_discounts', 'required_product');
  return $ret;
}

/**
 * #1220388, Optionally allow free items to be automatically added to cart.
 */
function tilers_discounts_update_6006() {
  $schema = tilers_discounts_schema();
  $ret = array();
  db_add_field($ret, 'tilers_discounts', 'add_to_cart', $schema['tilers_discounts']['fields']['add_to_cart']);
  return $ret;
}
